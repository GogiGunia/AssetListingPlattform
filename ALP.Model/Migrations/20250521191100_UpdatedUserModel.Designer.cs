// <auto-generated />
using System;
using ALP.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ALP.Model.Migrations
{
    [DbContext(typeof(AlpDbContext))]
    [Migration("20250521191100_UpdatedUserModel")]
    partial class UpdatedUserModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ALP.Model.Model.AdditionalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("IX_AdditionalProducts_IsAvailable");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_AdditionalProducts_Type");

                    b.ToTable("AdditionalProducts", (string)null);
                });

            modelBuilder.Entity("ALP.Model.Model.AdditionalProductPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualPricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AdditionalProductId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalProductId")
                        .HasDatabaseName("IX_AdditionalProductPurchases_AdditionalProductId");

                    b.HasIndex("BusinessUserId")
                        .HasDatabaseName("IX_AdditionalProductPurchases_BusinessUserId");

                    b.HasIndex("ListingId")
                        .HasDatabaseName("IX_AdditionalProductPurchases_ListingId");

                    b.HasIndex("PurchasedAt")
                        .HasDatabaseName("IX_AdditionalProductPurchases_PurchasedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_AdditionalProductPurchases_Status");

                    b.HasIndex("ListingId", "EffectEndDate")
                        .HasDatabaseName("IX_AdditionalProductPurchases_Listing_EffectEndDate");

                    b.ToTable("AdditionalProductPurchases", (string)null);
                });

            modelBuilder.Entity("ALP.Model.Model.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CurrentSubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId")
                        .HasDatabaseName("IX_Listings_BusinessUserId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Listings_CreatedAt");

                    b.HasIndex("CurrentSubscriptionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Listings_CurrentSubscriptionId")
                        .HasFilter("[CurrentSubscriptionId] IS NOT NULL");

                    b.ToTable("Listings", (string)null);

                    b.HasDiscriminator().HasValue("Listing");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ALP.Model.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualPricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BusinessUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId")
                        .HasDatabaseName("IX_Subscriptions_BusinessUserId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_Subscriptions_EndDate");

                    b.HasIndex("ListingId")
                        .HasDatabaseName("IX_Subscriptions_ListingId");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("IX_Subscriptions_SubscriptionPlanId");

                    b.HasIndex("ListingId", "EndDate")
                        .HasDatabaseName("IX_Subscriptions_Listing_EndDate");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("ALP.Model.Model.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("IX_SubscriptionPlans_IsAvailable");

                    b.ToTable("SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("ALP.Model.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ALP.Model.Model.AssetListing", b =>
                {
                    b.HasBaseType("ALP.Model.Model.Listing");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("ListingType")
                        .HasDatabaseName("IX_Listings_ListingType");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_Listings_Price");

                    b.HasDiscriminator().HasValue("AssetListing");
                });

            modelBuilder.Entity("ALP.Model.Model.JobListing", b =>
                {
                    b.HasBaseType("ALP.Model.Model.Listing");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("EmploymentType")
                        .HasDatabaseName("IX_Listings_EmploymentType");

                    b.HasIndex("JobLocation")
                        .HasDatabaseName("IX_Listings_Location");

                    b.HasIndex("Salary")
                        .HasDatabaseName("IX_Listings_Salary");

                    b.HasDiscriminator().HasValue("JobListing");
                });

            modelBuilder.Entity("ALP.Model.Model.AutoListing", b =>
                {
                    b.HasBaseType("ALP.Model.Model.AssetListing");

                    b.Property<string>("AutoModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasIndex("AutoModel")
                        .HasDatabaseName("IX_Listings_Model");

                    b.HasIndex("Make")
                        .HasDatabaseName("IX_Listings_Make");

                    b.HasIndex("Year")
                        .HasDatabaseName("IX_Listings_Year");

                    b.HasDiscriminator().HasValue("AutoListing");
                });

            modelBuilder.Entity("ALP.Model.Model.RealEstateListing", b =>
                {
                    b.HasBaseType("ALP.Model.Model.AssetListing");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SizeSquareMeters")
                        .HasColumnType("int");

                    b.HasIndex("City")
                        .HasDatabaseName("IX_Listings_City");

                    b.HasIndex("PostalCode")
                        .HasDatabaseName("IX_Listings_PostalCode");

                    b.HasIndex("Region")
                        .HasDatabaseName("IX_Listings_Region");

                    b.HasIndex("SizeSquareMeters")
                        .HasDatabaseName("IX_Listings_SizeSquareMeters");

                    b.HasDiscriminator().HasValue("RealEstateListing");
                });

            modelBuilder.Entity("ALP.Model.Model.YachtListing", b =>
                {
                    b.HasBaseType("ALP.Model.Model.AssetListing");

                    b.Property<int>("Berths")
                        .HasColumnType("int");

                    b.Property<int>("BuildYear")
                        .HasColumnType("int");

                    b.Property<string>("Builder")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Cabins")
                        .HasColumnType("int");

                    b.Property<decimal>("LengthOverallMeters")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("YachtLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("YachtModel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasIndex("BuildYear")
                        .HasDatabaseName("IX_Listings_BuildYear");

                    b.HasIndex("Builder")
                        .HasDatabaseName("IX_Listings_Builder");

                    b.HasIndex("LengthOverallMeters")
                        .HasDatabaseName("IX_Listings_LengthOverallMeters");

                    b.HasDiscriminator().HasValue("YachtListing");
                });

            modelBuilder.Entity("ALP.Model.Model.AdditionalProductPurchase", b =>
                {
                    b.HasOne("ALP.Model.Model.AdditionalProduct", "AdditionalProduct")
                        .WithMany("Purchases")
                        .HasForeignKey("AdditionalProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalProductPurchases_AdditionalProducts");

                    b.HasOne("ALP.Model.Model.User", "BusinessUser")
                        .WithMany("PurchasedAdditionalProducts")
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalProductPurchases_Users");

                    b.HasOne("ALP.Model.Model.Listing", "Listing")
                        .WithMany("AdditionalProductPurchases")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_AdditionalProductPurchases_Listings");

                    b.Navigation("AdditionalProduct");

                    b.Navigation("BusinessUser");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("ALP.Model.Model.Listing", b =>
                {
                    b.HasOne("ALP.Model.Model.User", "BusinessUser")
                        .WithMany("Listings")
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Listings_Users_BusinessUserId");

                    b.HasOne("ALP.Model.Model.Subscription", "CurrentSubscription")
                        .WithOne()
                        .HasForeignKey("ALP.Model.Model.Listing", "CurrentSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Listings_Subscriptions_CurrentSubscriptionId");

                    b.Navigation("BusinessUser");

                    b.Navigation("CurrentSubscription");
                });

            modelBuilder.Entity("ALP.Model.Model.Subscription", b =>
                {
                    b.HasOne("ALP.Model.Model.User", "BusinessUser")
                        .WithMany("PurchasedSubscriptions")
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Users_BusinessUserId");

                    b.HasOne("ALP.Model.Model.Listing", "Listing")
                        .WithMany("SubscriptionHistory")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Listings_History");

                    b.HasOne("ALP.Model.Model.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_SubscriptionPlans");

                    b.Navigation("BusinessUser");

                    b.Navigation("Listing");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("ALP.Model.Model.AdditionalProduct", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ALP.Model.Model.Listing", b =>
                {
                    b.Navigation("AdditionalProductPurchases");

                    b.Navigation("SubscriptionHistory");
                });

            modelBuilder.Entity("ALP.Model.Model.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ALP.Model.Model.User", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("PurchasedAdditionalProducts");

                    b.Navigation("PurchasedSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
